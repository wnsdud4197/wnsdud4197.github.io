{"componentChunkName":"component---src-templates-blog-post-js","path":"/algorithm/2005-swea-pascal/","result":{"data":{"site":{"siteMetadata":{"title":"PYTHON","author":"Yang Junyeong","siteUrl":"https://wnsdud4197.github.io","comment":{"disqusShortName":"","utterances":""},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"5dfac70a-ce56-5d59-82d5-c4bad588ce18","excerpt":"2005_파스칼의 삼각형 크기가 N인 파스칼의 삼각형을 만들어야 한다. 파스칼의 삼각형이란 아래와 같은 규칙을 따른다. 첫 번째 줄은 항상 숫자 1이다. 두 번째 줄부터 각 숫자들은 자신의 왼쪽과 오른쪽 위의 숫자의 합으로 구성된다. N이 4일 경우, 1\n1 1\n1 2 1\n1 3 3 1 N을 입력 받아 크기 N인 파스칼의 삼각형을 출력하는 프로그램을 작성하시오. 제약 사항 파스칼의 삼각형의 크기 N은 1 이상 10 이하의 정수이다. (1 ≤ N ≤ 1…","html":"<h1 id=\"2005_파스칼의-삼각형\" style=\"position:relative;\"><a href=\"#2005_%ED%8C%8C%EC%8A%A4%EC%B9%BC%EC%9D%98-%EC%82%BC%EA%B0%81%ED%98%95\" aria-label=\"2005_파스칼의 삼각형 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2005_파스칼의 삼각형</h1>\n<blockquote>\n<p>크기가 N인 파스칼의 삼각형을 만들어야 한다.</p>\n<p>파스칼의 삼각형이란 아래와 같은 규칙을 따른다.</p>\n<ol>\n<li>첫 번째 줄은 항상 숫자 1이다.</li>\n<li>두 번째 줄부터 각 숫자들은 자신의 왼쪽과 오른쪽 위의 숫자의 합으로 구성된다.</li>\n</ol>\n<p>N이 4일 경우,</p>\n<p>1\n1 1\n1 2 1\n1 3 3 1</p>\n<p>N을 입력 받아 크기 N인 파스칼의 삼각형을 출력하는 프로그램을 작성하시오.</p>\n<p><strong>[제약 사항]</strong></p>\n<p>파스칼의 삼각형의 크기 N은 1 이상 10 이하의 정수이다. (1 ≤ N ≤ 10)</p>\n<p><strong>[입력]</strong></p>\n<p>가장 첫 줄에는 테스트 케이스의 개수 T가 주어지고, 그 아래로 각 테스트 케이스가 주어진다.</p>\n<p>각 테스트 케이스에는 N이 주어진다.</p>\n<p><strong>[출력]</strong></p>\n<p>각 줄은 ‘#t’로 시작하고, 다음 줄부터 파스칼의 삼각형을 출력한다.</p>\n<p>삼각형 각 줄의 처음 숫자가 나오기 전까지의 빈 칸은 생략하고 숫자들 사이에는 한 칸의 빈칸을 출력한다.</p>\n<p>(t는 테스트 케이스의 번호를 의미하며 1부터 시작한다.)</p>\n<p><strong>[입력 예시]</strong></p>\n<p>1\n4</p>\n<p><strong>[출력 예시]</strong></p>\n<p>#1\n1\n1 1\n1 2 1\n1 3 3 1</p>\n</blockquote>\n<ul>\n<li>\n<p>알고리즘 도출</p>\n<ul>\n<li>인접한 위의 두 요소들을 더한 값을 나열해야한다. 그러기 위해 기존의 리스트를 맨 끝값에 0이 추가된 리스트와 맨 앞에 0이 추가된 리스트를 만들어 두 리스트를 병합하는 방식을 만들고자 했다.</li>\n<li>우선 기존의 리스트를 복사할 때, 슬라이싱을 이용하여 복사를 하였다. </li>\n<li><code class=\"language-text\">append</code>메서드를 이용하여 마지막에 0을 추가한 리스트를 만들었다.</li>\n<li><code class=\"language-text\">insert(0, 0)</code> 메서드를 이용하여 list의 0번째에 0을 넣고, 기존의 list의 값들의 인덱스는 한칸씩 밀려난다.</li>\n<li>이렇게 만들어진 두 list들을 병합하기 위해 <code class=\"language-text\">zip</code>과 <code class=\"language-text\">map</code>을 사용한다.</li>\n<li><code class=\"language-text\">zip(*interables)</code>은 iterable한 데이터들을 튜플로 묶어주는 역할을 한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">zip</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>iterables<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># zip('ABCD', 'xy') --> Ax By</span>\n    sentinel <span class=\"token operator\">=</span> <span class=\"token builtin\">object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    iterators <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">iter</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> it <span class=\"token keyword\">in</span> iterables<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">while</span> iterators<span class=\"token punctuation\">:</span>\n        result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">for</span> it <span class=\"token keyword\">in</span> iterators<span class=\"token punctuation\">:</span>\n            elem <span class=\"token operator\">=</span> <span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">,</span> sentinel<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> elem <span class=\"token keyword\">is</span> sentinel<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span>\n            result<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">yield</span> <span class=\"token builtin\">tuple</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">*</code>연산자를 함께 사용하면 upzip도 가능하다!</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> x <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> y <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> zipped <span class=\"token operator\">=</span> <span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>zipped<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> x2<span class=\"token punctuation\">,</span> y2 <span class=\"token operator\">=</span> <span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> x <span class=\"token operator\">==</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>x2<span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> y <span class=\"token operator\">==</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>y2<span class=\"token punctuation\">)</span>\n<span class=\"token boolean\">True</span></code></pre></div>\n<ul>\n<li>튜플로 묶어진 리스트가 만들어지는데, <code class=\"language-text\">map</code>을 이용하여 튜플의 값을 더해서 다시 list로 만들어준다!</li>\n<li>이렇게 map의 전달인자로 sum이라는 내장함수가 사용되는데 이렇게 전달인자로 사용될 수 있는 이유는 파이썬에서 함수는 1급 객체이기 때문이다!</li>\n<li>\n<p>일급 객체란?</p>\n<ol>\n<li>다른 변수에 대해 대입이나 바인딩이 가능하다.</li>\n<li>어떤 함수에 전달되는 인자로 사용이 가능하다.</li>\n<li>함수의 리턴값으로 사용이 가능하다.</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">T <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> test_case <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> T <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    N <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#{}'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>test_case<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        result1 <span class=\"token operator\">=</span> result<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n        result1<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        result2 <span class=\"token operator\">=</span> result<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n        result2<span class=\"token punctuation\">.</span>insert<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        result <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>result1<span class=\"token punctuation\">,</span>result2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"2005 swea pascal","date":"February 04, 2021"}}},"pageContext":{"slug":"/algorithm/2005-swea-pascal/","previous":{"fields":{"slug":"/essay/blog-start/"},"frontmatter":{"title":"blog start","category":"essay","draft":false}},"next":null}},"staticQueryHashes":["3128451518","521680639"]}